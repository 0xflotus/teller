// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/google_secretmanager.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	secretmanager "google.golang.org/genproto/googleapis/cloud/secretmanager/v1"
)

// MockGoogleSMClient is a mock of GoogleSMClient interface.
type MockGoogleSMClient struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleSMClientMockRecorder
}

// MockGoogleSMClientMockRecorder is the mock recorder for MockGoogleSMClient.
type MockGoogleSMClientMockRecorder struct {
	mock *MockGoogleSMClient
}

// NewMockGoogleSMClient creates a new mock instance.
func NewMockGoogleSMClient(ctrl *gomock.Controller) *MockGoogleSMClient {
	mock := &MockGoogleSMClient{ctrl: ctrl}
	mock.recorder = &MockGoogleSMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleSMClient) EXPECT() *MockGoogleSMClientMockRecorder {
	return m.recorder
}

// AccessSecretVersion mocks base method.
func (m *MockGoogleSMClient) AccessSecretVersion(ctx context.Context, req *secretmanager.AccessSecretVersionRequest, opts ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanager.AccessSecretVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessSecretVersion indicates an expected call of AccessSecretVersion.
func (mr *MockGoogleSMClientMockRecorder) AccessSecretVersion(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSecretVersion", reflect.TypeOf((*MockGoogleSMClient)(nil).AccessSecretVersion), varargs...)
}
